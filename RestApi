REST API

REST is an acronym for “REpresentational State Transfer” which is simply an architectural style originally written about by Roy Fielding
in his doctoral dissertation.

To be clear, the constraints in Roy Fielding’s dissertation MUST be met in order for a service to be technically RESTful. 
And the REST constraints do not specify a communication protocol. 
However, at this point the term is used very loosely and in today’s Internet world, RESTful almost always means an HTTP-based API.

In other words, the caller (or client):

Makes an HTTP request to a URL…
Using one of the standard HTTP methods (GET, PUT, POST, PATCH, DELETE, etc.)…
With some content (usually JSON) in the body…
And waits for a response, which:
Indicates status via an HTTP response code
And usually has more JSON in the body.

_______________________________________________________________________________________________________________________________________________________________________

THE 6 CONSTRAINTS OF REST ARCHITECTURAL STYLE AS COMMUNICATED BY ROY FIELDING IN HIS DOCTORAL DISSERTION

1. Client-Server Separation
The client and server are independent of each other. 
This separation allows each to evolve separately. 
The client is responsible for the user interface, while the server manages data storage and business logic.
  
2. Statelessness
Each API request from the client to the server must contain all the information needed to understand and process the request. 
The server does not store any client context between requests. 
This improves scalability and reliability.

3. Cacheability
Responses must explicitly define whether they are cacheable or not. 
Caching can improve performance by reducing the need for repeated requests for the same resource, thus decreasing latency.
  
4. Layered System
The architecture can be composed of multiple layers (e.g., load balancers, caches, and servers). 
Each layer has a specific functionality, and components can interact with each other without needing to know about the other layers.

5. Uniform Interface
A uniform interface simplifies and decouples the architecture, allowing each part to evolve independently. 
This typically involves using standard methods (GET, POST, PUT, DELETE) and conventions (like URIs) for resource identification and manipulation.

6. Code on Demand (optional)
Servers can extend client functionality by transferring executable code (e.g., JavaScript). 
This constraint is optional and not commonly used, but it allows for more dynamic client applications.

